from adjust_scales import adjust_scale_values
def group_questions_by_trait(tests):
    """
    –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω—ã.
    """
    trait_questions = {}

    print("üîç –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º...")

    for test_id, test in tests.items():
        for question in test["questions"]:
            for trait in question["traits"]:
                if trait not in trait_questions:
                    trait_questions[trait] = []
                trait_questions[trait].append(question)

    print(f"üìù –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ {len(trait_questions)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.")
    return trait_questions


def process_user_responses(tests, trait_questions, responses):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω—ã.
    """
    scores = {trait: 0 for trait in trait_questions}

    print("üìä –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏...")

    for trait, questions in trait_questions.items():
        for question in questions:
            answer_data = responses.get(question["question_id"])
            if answer_data:
                answer_weight = next((a["weight"].get(trait, 0) for a in question["answers"] if a["answer"] == answer_data), 0)
                scores[trait] += answer_weight
                print(f"‚úÖ –í–æ–ø—Ä–æ—Å {question['question_id']}: –æ—Ç–≤–µ—Ç '{answer_data}', –≤–µ—Å –¥–ª—è {trait}: {answer_weight}")

    print(f"üìà –ü–æ–¥—Å—á–∏—Ç–∞–Ω—ã –±–∞–ª–ª—ã: {scores}")
    return scores


def adjust_scores_for_number_of_questions(scores, trait_questions):
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.
    """
    adjusted_scores = {}

    print("üîß –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –±–∞–ª–ª—ã —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...")

    for trait, score in scores.items():
        M = len(trait_questions[trait])  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        N = len([q for q in trait_questions[trait] if q["question_id"] in scores])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        adjusted_score = score * M / N if N != 0 else score
        adjusted_scores[trait] = adjusted_score
        print(f"üìä –î–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ '{trait}' –±–∞–ª–ª—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã: {adjusted_score:.2f}")

    return adjusted_scores


def limit_score_range(scores, min_score, max_score):
    """
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–∞–ª–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —à–∫–∞–ª—ã.
    """
    limited_scores = {}

    print("‚öñÔ∏è –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–∞–ª–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–º–∫–∏ —à–∫–∞–ª—ã...")

    for trait, score in scores.items():
        limited_score = min(max(score, min_score), max_score)
        limited_scores[trait] = limited_score
        print(f"‚úÖ –î–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ '{trait}' –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –±–∞–ª–ª—ã: {limited_score:.2f}")

    return limited_scores


def interpret_scores(scores, scales):
    """
    –°–æ–æ—Ç–Ω–æ—Å–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —à–∫–∞–ª–∞–º–∏.
    """
    interpretations = {}

    print("üîç –°–æ–æ—Ç–Ω–æ—Å–∏–º –±–∞–ª–ª—ã —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —à–∫–∞–ª–∞–º–∏...")

    for trait, score in scores.items():
        scale = scales.get(trait, {})
        if scale:
            min_score = scale.get("min_score", 0)
            max_score = scale.get("max_score", 100)
            interpretation = f"–ë–∞–ª–ª—ã –¥–ª—è '{trait}': {score:.2f}. –í –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ: [{min_score}, {max_score}]"
        else:
            interpretation = f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ '{trait}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

        interpretations[trait] = interpretation
        print(f"üìã {interpretation}")

    return interpretations

def determine_dominant_trait(scores, trait_pairs):
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —á–µ—Ä—Ç—ã –≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Ç–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–û–ø—Ç–∏–º–∏–∑–º' vs '–ü–µ—Å—Å–∏–º–∏–∑–º').
    """
    dominant_traits = {}

    for pair in trait_pairs:
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        trait_1, trait_2 = pair
        score_1 = scores.get(trait_1, 0)
        score_2 = scores.get(trait_2, 0)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —á–µ—Ä—Ç—É
        if score_1 > score_2:
            dominant_traits[trait_1] = "–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
            dominant_traits[trait_2] = "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
        elif score_2 > score_1:
            dominant_traits[trait_2] = "–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
            dominant_traits[trait_1] = "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
        else:
            # –í —Å–ª—É—á–∞–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
            dominant_traits[trait_1] = "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
            dominant_traits[trait_2] = "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"

    return dominant_traits

def filter_dominant_traits(all_scores):
    """
    –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —á–µ—Ä—Ç—ã –∏–∑ –≤—Å–µ—Ö –±–∞–ª–ª–æ–≤.
    """
    dominant_traits = {trait: status for trait, status in all_scores.items() if status == "–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç"}

    return dominant_traits


def process_other_tests(tests, responses):
    print("üõ†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç –∏ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ª–∏—á–Ω–æ—Å—Ç–∏
    excluded_traits = {"–°–∞–Ω–≥–≤–∏–Ω–∏–∫", "–•–æ–ª–µ—Ä–∏–∫", "–ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫", "–§–ª–µ–≥–º–∞—Ç–∏–∫", "–í–∏–∑—É–∞–ª", "–ê—É–¥–∏—Ç–∏–≤", "–ö–∏–Ω–µ—Å—Ç–µ—Ç–∏–∫"}

    filtered_tests = {test_id: test_data for test_id, test_data in tests.items() if
                      test_id not in ["temperament_test", "representative_system_test"]}

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
    trait_questions = group_questions_by_trait(filtered_tests)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    trait_questions = {trait: questions for trait, questions in trait_questions.items() if trait not in excluded_traits}

    # –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    scores = process_user_responses(filtered_tests, trait_questions, responses)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —á–µ—Ä—Ç –¥–ª—è –ø–∞—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û–ø—Ç–∏–º–∏–∑–º vs –ü–µ—Å—Å–∏–º–∏–∑–º)
    trait_pairs = [
        ("–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Å–∏—è","–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è"),
         ("–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å","–í–æ–∑–±—É–¥–∏–º–æ—Å—Ç—å"),
        ("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ü–∞—Å—Å–∏–≤–Ω–æ—Å—Ç—å"),
        ("–†–∏–≥–∏–¥–Ω–æ—Å—Ç—å", "–ì–∏–±–∫–æ—Å—Ç—å"),
        ("–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è", "–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è")
    ]
    dominant_traits = determine_dominant_trait(scores, trait_pairs)
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–ª–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    adjusted_scores = adjust_scores_for_number_of_questions(scores, trait_questions)
    limited_scores = limit_score_range(adjusted_scores, min_score=0, max_score=100)

    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –±–∞–ª–ª–æ–≤
    updated_tests = adjust_scale_values(filtered_tests)
    interpretations = interpret_scores(limited_scores, updated_tests)
    only_dominant_traits = [x for x in dominant_traits if dominant_traits[x] == "–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç"]

    return {
        "scores": limited_scores,
        # "interpretations": interpretations,
        "dominant_traits": only_dominant_traits
    }