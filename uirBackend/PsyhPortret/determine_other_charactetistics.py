# from .adjust_scales import adjust_scale_values

# def group_questions_by_trait(tests):
#     """
#     –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º.
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω—ã.
#     """
#     trait_questions = {}

#     print("üîç –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º...")

#     for test_id, test in tests.items():
#         for question in test["questions"]:
#             for trait in question["traits"]:
#                 if trait not in trait_questions:
#                     trait_questions[trait] = []
#                 trait_questions[trait].append(question)

#     print(f"üìù –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ {len(trait_questions)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.")
#     return trait_questions


# def process_user_responses(tests, trait_questions, responses):
#     """
#     –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω—ã.
#     """
#     scores = {trait: 0 for trait in trait_questions}

#     print("üìä –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏...")

#     for trait, questions in trait_questions.items():
#         for question in questions:
#             answer_data = responses.get(question["question_id"])
#             if answer_data:
#                 answer_weight = next((a["weight"].get(trait, 0) for a in question["answers"] if a["answer"] == answer_data), 0)
#                 scores[trait] += answer_weight
#                 print(f"‚úÖ –í–æ–ø—Ä–æ—Å {question['question_id']}: –æ—Ç–≤–µ—Ç '{answer_data}', –≤–µ—Å –¥–ª—è {trait}: {answer_weight}")

#     print(f"üìà –ü–æ–¥—Å—á–∏—Ç–∞–Ω—ã –±–∞–ª–ª—ã: {scores}")
#     return scores


# def adjust_scores_for_number_of_questions(scores, trait_questions):
#     """
#     –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.
#     """
#     adjusted_scores = {}

#     print("üîß –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –±–∞–ª–ª—ã —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...")

#     for trait, score in scores.items():
#         M = len(trait_questions[trait])  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
#         N = len([q for q in trait_questions[trait] if q["question_id"] in scores])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
#         adjusted_score = score * M / N if N != 0 else score
#         adjusted_scores[trait] = adjusted_score
#         print(f"üìä –î–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ '{trait}' –±–∞–ª–ª—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã: {adjusted_score:.2f}")

#     return adjusted_scores


# def limit_score_range(scores, min_score, max_score):
#     """
#     –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–∞–ª–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —à–∫–∞–ª—ã.
#     """
#     limited_scores = {}

#     print("‚öñÔ∏è –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–∞–ª–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–º–∫–∏ —à–∫–∞–ª—ã...")

#     for trait, score in scores.items():
#         limited_score = min(max(score, min_score), max_score)
#         limited_scores[trait] = limited_score
#         print(f"‚úÖ –î–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ '{trait}' –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –±–∞–ª–ª—ã: {limited_score:.2f}")

#     return limited_scores


# def interpret_scores(scores, scales):
#     """
#     –°–æ–æ—Ç–Ω–æ—Å–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —à–∫–∞–ª–∞–º–∏.
#     """
#     interpretations = {}

#     print("üîç –°–æ–æ—Ç–Ω–æ—Å–∏–º –±–∞–ª–ª—ã —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —à–∫–∞–ª–∞–º–∏...")

#     for trait, score in scores.items():
#         scale = scales.get(trait, {})
#         if scale:
#             min_score = scale.get("min_score", 0)
#             max_score = scale.get("max_score", 100)
#             interpretation = f"–ë–∞–ª–ª—ã –¥–ª—è '{trait}': {score:.2f}. –í –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ: [{min_score}, {max_score}]"
#         else:
#             interpretation = f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ '{trait}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

#         interpretations[trait] = interpretation
#         print(f"üìã {interpretation}")

#     return interpretations

# def determine_dominant_trait(scores, trait_pairs):
#     """
#     –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —á–µ—Ä—Ç—ã –≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Ç–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–û–ø—Ç–∏–º–∏–∑–º' vs '–ü–µ—Å—Å–∏–º–∏–∑–º').
#     """
#     dominant_traits = {}

#     for pair in trait_pairs:
#         # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
#         trait_1, trait_2 = pair
#         score_1 = scores.get(trait_1, 0)
#         score_2 = scores.get(trait_2, 0)
#         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —á–µ—Ä—Ç—É
#         if score_1 > score_2:
#             dominant_traits[trait_1] = "–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
#             dominant_traits[trait_2] = "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
#         elif score_2 > score_1:
#             dominant_traits[trait_2] = "–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
#             dominant_traits[trait_1] = "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
#         else:
#             # –í —Å–ª—É—á–∞–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
#             dominant_traits[trait_1] = "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
#             dominant_traits[trait_2] = "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"

#     return dominant_traits

# def filter_dominant_traits(all_scores):
#     """
#     –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —á–µ—Ä—Ç—ã –∏–∑ –≤—Å–µ—Ö –±–∞–ª–ª–æ–≤.
#     """
#     dominant_traits = {trait: status for trait, status in all_scores.items() if status == "–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç"}

#     return dominant_traits


# def process_other_tests(tests, responses):
#     print("üõ†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
#     # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç –∏ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ª–∏—á–Ω–æ—Å—Ç–∏
#     excluded_traits = {"–°–∞–Ω–≥–≤–∏–Ω–∏–∫", "–•–æ–ª–µ—Ä–∏–∫", "–ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫", "–§–ª–µ–≥–º–∞—Ç–∏–∫", "–í–∏–∑—É–∞–ª", "–ê—É–¥–∏—Ç–∏–≤", "–ö–∏–Ω–µ—Å—Ç–µ—Ç–∏–∫"}

#     filtered_tests = {test_id: test_data for test_id, test_data in tests.items() if
#                       test_id not in ["temperament_test", "representative_system_test"]}

#     # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
#     trait_questions = group_questions_by_trait(filtered_tests)

#     # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
#     trait_questions = {trait: questions for trait, questions in trait_questions.items() if trait not in excluded_traits}

#     # –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
#     scores = process_user_responses(filtered_tests, trait_questions, responses)

#     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —á–µ—Ä—Ç –¥–ª—è –ø–∞—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û–ø—Ç–∏–º–∏–∑–º vs –ü–µ—Å—Å–∏–º–∏–∑–º)
#     trait_pairs = [
#         ("–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Å–∏—è","–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è"),
#          ("–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å","–í–æ–∑–±—É–¥–∏–º–æ—Å—Ç—å"),
#         ("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ü–∞—Å—Å–∏–≤–Ω–æ—Å—Ç—å"),
#         ("–†–∏–≥–∏–¥–Ω–æ—Å—Ç—å", "–ì–∏–±–∫–æ—Å—Ç—å"),
#         ("–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è", "–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è")
#     ]
#     dominant_traits = determine_dominant_trait(scores, trait_pairs)
#     # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–ª–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π
#     adjusted_scores = adjust_scores_for_number_of_questions(scores, trait_questions)
#     limited_scores = limit_score_range(adjusted_scores, min_score=0, max_score=100)

#     # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –±–∞–ª–ª–æ–≤
#     updated_tests = adjust_scale_values(filtered_tests)
#     interpretations = interpret_scores(limited_scores, updated_tests)
#     only_dominant_traits = [x for x in dominant_traits if dominant_traits[x] == "–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç"]

#     return {
#         "scores": limited_scores,
#         # "interpretations": interpretations,
#         "dominant_traits": only_dominant_traits
#     }








#!#$!@$!#$!#$!#$!#$!#$!#$!#$!#$!#$!#$!#$!#$!#$#!#$#$#!$!#!##$!$
# from .adjust_scales import adjust_scale_values

# def group_questions_by_trait(tests):
#     """
#     –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º.
#     """
#     trait_questions = {}

#     print("üîç –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º...")

#     for test in tests:
#         for question in test.questions.all():  # –í–º–µ—Å—Ç–æ test["questions"]
#             for trait in question.get_traits():  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_traits()
#                 if trait not in trait_questions:
#                     trait_questions[trait] = []
#                 trait_questions[trait].append(question)

#     print(f"üìù –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ {len(trait_questions)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.")
#     return trait_questions

# from core.models import AnswerWeight 

# def process_user_responses(tests, trait_questions, responses):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–ª—ã –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º.
#     """
#     print(f"responses: {responses}")

#     print("üìä –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º...")
#     scores = {trait: 0 for trait in trait_questions}

#     for trait, questions in trait_questions.items():
#         for question in questions:
#             print(f"\nüü® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å {question.id} (—Ç–µ–º–∞: {trait})")
#             # ID –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º –∫ int
#             user_answer_id = responses.get(str(question.id)) or responses.get(question.id)
#             print(f"üîπ ID –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_answer_id}")

#             if user_answer_id:
#                 for answer in question.answers.all():
#                     print(f"üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞: {answer.answer_text} (ID: {answer.id})")
#                     if str(answer.id) == str(user_answer_id):  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ ID
#                         print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π –æ—Ç–≤–µ—Ç: {answer.answer_text}")
#                         try:
#                             weight = AnswerWeight.objects.get(answer=answer, trait__name=trait).weight
#                         except AnswerWeight.DoesNotExist:
#                             print(f"‚ö†Ô∏è –ù–µ—Ç –≤–µ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ {answer.id} –∏ —á–µ—Ä—Ç—ã {trait}")
#                             weight = 0
#                         scores[trait] += weight
#                         break

#     print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {scores}")
#     return scores

# def adjust_scores_for_number_of_questions(scores, trait_questions):
#     """
#     –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –±–∞–ª–ª—ã —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.
#     """
#     print("üîß –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤...")
#     adjusted = {}

#     for trait, raw_score in scores.items():
#         total_q = len(trait_questions[trait])
#         answered_q = sum(1 for q in trait_questions[trait] if q.id in scores)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º q.id –≤–º–µ—Å—Ç–æ q["question_id"]
#         adjusted[trait] = raw_score * total_q / answered_q if answered_q else raw_score
#         print(f"üìä '{trait}': —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ {adjusted[trait]:.2f}")

#     return adjusted



# def limit_score_range(scores, min_score=0, max_score=100):
#     """
#     –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω–æ–π —à–∫–∞–ª—ã.
#     """
#     print("‚öñÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ —à–∫–∞–ª–µ...")
#     return {
#         trait: max(min(score, max_score), min_score)
#         for trait, score in scores.items()
#     }


# def interpret_scores(scores, tests):
#     """
#     –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –±–∞–ª–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö —à–∫–∞–ª.
#     """
#     print("üîç –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
#     interpretations = {}

#     # –ü–æ–ª—É—á–∞–µ–º —à–∫–∞–ª—ã –∏–∑ —Ç–µ—Å—Ç–æ–≤
#     scales = []
#     for test in tests:
#         scales.extend(test.scales.all())  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∫–∞–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ—Å—Ç–æ–º

#     for trait, score in scores.items():
#         # –ò—â–µ–º —à–∫–∞–ª—É –ø–æ –∏–º–µ–Ω–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (trait)
#         scale = next((s for s in scales if s.trait == trait), None)

#         if scale:
#             min_s, max_s = scale.min_score, scale.max_score  # –ü–æ–ª—É—á–∞–µ–º min –∏ max –¥–ª—è —à–∫–∞–ª—ã
#             result = f"'{trait}': {score:.2f} (—à–∫–∞–ª–∞: {min_s}-{max_s})"
#         else:
#             result = f"–ù–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è '{trait}'"
#         interpretations[trait] = result
#         print(f"üìã {result}")

#     return interpretations



# def determine_dominant_trait(scores, trait_pairs):
#     """
#     –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —á–µ—Ä—Ç—É –≤ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
#     """
#     dominant = {}
#     for trait1, trait2 in trait_pairs:
#         s1, s2 = scores.get(trait1, 0), scores.get(trait2, 0)
#         if s1 > s2:
#             dominant[trait1], dominant[trait2] = "–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç", "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
#         elif s2 > s1:
#             dominant[trait2], dominant[trait1] = "–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç", "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
#         else:
#             dominant[trait1] = dominant[trait2] = "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
#     return dominant


# def filter_dominant_traits(all_traits):
#     """
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —á–µ—Ä—Ç—ã.
#     """
#     return [trait for trait, status in all_traits.items() if status == "–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç"]


# def process_other_tests(tests, responses):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã, –∫—Ä–æ–º–µ —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π.
#     """
#     print("üõ†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
#     try:
#         excluded_traits = {"–°–∞–Ω–≥–≤–∏–Ω–∏–∫", "–•–æ–ª–µ—Ä–∏–∫", "–ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫", "–§–ª–µ–≥–º–∞—Ç–∏–∫", "–í–∏–∑—É–∞–ª", "–ê—É–¥–∏—Ç–∏–≤", "–ö–∏–Ω–µ—Å—Ç–µ—Ç–∏–∫"}
#         excluded_test_ids = {"temperament_test", "representative_system_test"}

#         filtered_tests = [t for t in tests if t.id not in excluded_test_ids] 
#         trait_questions = group_questions_by_trait(filtered_tests)
#         trait_questions = {trait: q for trait, q in trait_questions.items() if trait not in excluded_traits}

#         scores = process_user_responses(filtered_tests, trait_questions, responses)

#         trait_pairs = [
#             ("–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Å–∏—è", "–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è"),
#             ("–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", "–í–æ–∑–±—É–¥–∏–º–æ—Å—Ç—å"),
#             ("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ü–∞—Å—Å–∏–≤–Ω–æ—Å—Ç—å"),
#             ("–†–∏–≥–∏–¥–Ω–æ—Å—Ç—å", "–ì–∏–±–∫–æ—Å—Ç—å"),
#             ("–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è", "–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è")
#         ]
#         dominant_traits = determine_dominant_trait(scores, trait_pairs)
#         print(f"dominant_traits: {dominant_traits}")
#         only_dominant = filter_dominant_traits(dominant_traits)
#         print(f"only_dominant_traits: {only_dominant}")


#         adjusted = adjust_scores_for_number_of_questions(scores, trait_questions)
#         limited = limit_score_range(adjusted)
#         # interpreted_scales = interpret_scores(limited, adjust_scale_values(filtered_tests))

#         return {
#             "scores": limited,
#             # "interpretations": interpreted_scales,
#             "dominant_traits": only_dominant
#         }
#     except Exception as e:
#         print(e)
#         return 


from .adjust_scales import adjust_scale_values
from core.models import AnswerWeight

def group_questions_by_trait(tests):
    """
    –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º.
    """
    trait_questions = {}

    print("üîç –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º...")

    for test in tests:
        for question in test.questions.all():
            for trait in question.get_traits():
                trait_name = trait.name.strip()  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è
                if trait_name not in trait_questions:
                    trait_questions[trait_name] = []
                trait_questions[trait_name].append(question)

    print(f"üìù –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ {len(trait_questions)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.")
    return trait_questions


def process_user_responses(tests, trait_questions, responses):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–ª—ã –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º.
    """
    print(f"responses: {responses}")
    print("üìä –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º...")

    scores = {trait: 0 for trait in trait_questions}

    for trait, questions in trait_questions.items():
        for question in questions:
            print(f"\nüü® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å {question.id} (—Ç–µ–º–∞: {trait})")
            user_answer_id = responses.get(str(question.id)) or responses.get(question.id)
            print(f"üîπ ID –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_answer_id}")

            if user_answer_id:
                for answer in question.answers.all():
                    print(f"üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞: {answer.answer_text} (ID: {answer.id})")
                    if str(answer.id) == str(user_answer_id):
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π –æ—Ç–≤–µ—Ç: {answer.answer_text}")
                        try:
                            answer_weight = AnswerWeight.objects.get(answer=answer, trait__name=trait)
                            weight = answer_weight.weight
                            print(f"‚úÖ –í–µ—Å –æ—Ç–≤–µ—Ç–∞ {answer.id} –¥–ª—è —á–µ—Ä—Ç—ã '{trait}': {weight}")
                        except AnswerWeight.DoesNotExist:
                            print(f"‚ö†Ô∏è –ù–µ—Ç –≤–µ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ {answer.id} –∏ —á–µ—Ä—Ç—ã '{trait}'")
                            weight = 0
                        scores[trait] += weight
                        break

    print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {scores}")
    return scores


def adjust_scores_for_number_of_questions(scores, trait_questions):
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –±–∞–ª–ª—ã —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.
    """
    print("üîß –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤...")
    adjusted = {}

    for trait, raw_score in scores.items():
        total_q = len(trait_questions[trait])
        answered_q = sum(1 for q in trait_questions[trait] if str(q.id) in scores)
        adjusted[trait] = raw_score * total_q / answered_q if answered_q else raw_score
        print(f"üìä '{trait}': —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ {adjusted[trait]:.2f}")

    return adjusted


def limit_score_range(scores, min_score=0, max_score=100):
    """
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω–æ–π —à–∫–∞–ª—ã.
    """
    print("‚öñÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ —à–∫–∞–ª–µ...")
    return {
        trait: max(min(score, max_score), min_score)
        for trait, score in scores.items()
    }


def interpret_scores(scores, tests):
    """
    –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –±–∞–ª–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö —à–∫–∞–ª.
    """
    print("üîç –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    interpretations = {}

    scales = []
    for test in tests:
        scales.extend(test.scales.all())

    for trait, score in scores.items():
        scale = next((s for s in scales if s.trait.name.strip() == trait), None)
        if scale:
            min_s, max_s = scale.min_score, scale.max_score
            result = f"'{trait}': {score:.2f} (—à–∫–∞–ª–∞: {min_s}-{max_s})"
        else:
            result = f"–ù–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è '{trait}'"
        interpretations[trait] = result
        print(f"üìã {result}")

    return interpretations


def determine_dominant_trait(scores, trait_pairs):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —á–µ—Ä—Ç—É –≤ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
    """
    print("üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —á–µ—Ä—Ç...")
    dominant = {}

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ —á–µ—Ä—Ç
    scores = {k.strip(): v for k, v in scores.items()}
    trait_pairs = [(t1.strip(), t2.strip()) for t1, t2 in trait_pairs]

    for trait1, trait2 in trait_pairs:
        s1 = scores.get(trait1, 0)
        s2 = scores.get(trait2, 0)

        if s1 > s2:
            dominant[trait1], dominant[trait2] = "–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç", "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
        elif s2 > s1:
            dominant[trait2], dominant[trait1] = "–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç", "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"
        else:
            dominant[trait1] = dominant[trait2] = "–ù–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç"

    return dominant


def filter_dominant_traits(all_traits):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —á–µ—Ä—Ç—ã.
    """
    return [trait for trait, status in all_traits.items() if status == "–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç"]


def process_other_tests(tests, responses):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã, –∫—Ä–æ–º–µ —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π.
    """
    print("üõ†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")

    try:
        excluded_traits = {"–°–∞–Ω–≥–≤–∏–Ω–∏–∫", "–•–æ–ª–µ—Ä–∏–∫", "–ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫", "–§–ª–µ–≥–º–∞—Ç–∏–∫", "–í–∏–∑—É–∞–ª", "–ê—É–¥–∏–∞–ª", "–ö–∏–Ω–µ—Å—Ç–µ—Ç–∏–∫"}
        excluded_test_ids = {"temperament_test", "representative_system_test"}

        filtered_tests = [t for t in tests if t.id not in excluded_test_ids]
        trait_questions = group_questions_by_trait(filtered_tests)

        # –£–±–∏—Ä–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —á–µ—Ä—Ç—ã
        trait_questions = {
            trait: qs for trait, qs in trait_questions.items()
            if trait.strip() not in excluded_traits
        }

        scores = process_user_responses(filtered_tests, trait_questions, responses)

        print("üìä –ò–¢–û–ì–û–í–´–ï –ë–ê–õ–õ–´:")
        for trait, score in scores.items():
            print(f"{trait}: {score}")

        trait_pairs = [
            ("–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Å–∏—è", "–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è"),
            ("–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", "–í–æ–∑–±—É–¥–∏–º–æ—Å—Ç—å"),
            ("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ü–∞—Å—Å–∏–≤–Ω–æ—Å—Ç—å"),
            ("–†–∏–≥–∏–¥–Ω–æ—Å—Ç—å", "–ì–∏–±–∫–æ—Å—Ç—å"),
            ("–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è", "–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è")
        ]
        dominant_traits = determine_dominant_trait(scores, trait_pairs)
        print(f"dominant_traits: {dominant_traits}")

        only_dominant = filter_dominant_traits(dominant_traits)
        print(f"only_dominant_traits: {only_dominant}")

        adjusted = adjust_scores_for_number_of_questions(scores, trait_questions)
        limited = limit_score_range(adjusted)

        # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–≤–æ–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        # interpreted_scales = interpret_scores(limited, adjust_scale_values(filtered_tests))

        return {
            "scores": limited,
            # "interpretations": interpreted_scales,
            "dominant_traits": only_dominant
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        return
