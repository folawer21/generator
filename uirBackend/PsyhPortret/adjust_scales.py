def calculate_conversion_coefficients(tests):
    """
    –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –¥–ª—è —à–∫–∞–ª –≤ –∫–∞–∂–¥–æ–º —Ç–µ—Å—Ç–µ
    """
    print("üîÑ –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —à–∫–∞–ª—ã...")

    conversion_coefficients = {}

    for test in tests:  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç—ã Test
        scales = test.scales.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∫–∞–ª—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ .all()
        original_question_count = test.questions.count()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ .count()
        new_question_count = test.questions.count()  # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ .count()

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —à–∫–∞–ª—ã
        for scale in scales:  # scales ‚Äî —ç—Ç–æ –Ω–∞–±–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤, –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
            original_max_score = scale.max_score  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É —à–∫–∞–ª—ã –µ—Å—Ç—å max_score
            coefficient = (new_question_count / original_question_count)
            conversion_coefficients[scale.trait] = coefficient  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —à–∫–∞–ª—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞
            print(
                f"  ‚û°Ô∏è –î–ª—è —à–∫–∞–ª—ã {scale.trait}: K = ({new_question_count}/{original_question_count}) = {coefficient:.2f}")

    return conversion_coefficients


def adjust_scale_values(tests):
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —à–∫–∞–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    """
    print("\nüîß –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —à–∫–∞–ª—ã...")
    conversion_coefficients = calculate_conversion_coefficients(tests)
    
    for test in tests:  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç—ã Test
        scales = test.scales.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∫–∞–ª—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ .all()

        for scale in scales:  # scales ‚Äî —ç—Ç–æ –Ω–∞–±–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤, –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –¥–ª—è —à–∫–∞–ª—ã
            coefficient = conversion_coefficients.get(scale.trait, 1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —à–∫–∞–ª—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞
            original_max_score = scale.max_score  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É —à–∫–∞–ª—ã –µ—Å—Ç—å max_score

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã
            adjusted_max_score = original_max_score * coefficient
            scale.adjusted_max_score = adjusted_max_score  # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º max_score —à–∫–∞–ª—ã
            print(f"  ‚û°Ô∏è –®–∫–∞–ª–∞ {scale.trait} —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞. –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º: {adjusted_max_score:.2f}")

    return tests
