def get_rep_system_trait_questions(tests, responses):
    rep_system_traits = ["–í–∏–∑—É–∞–ª", "–ê—É–¥–∏–∞–ª", "–ö–∏–Ω–µ—Å—Ç–µ—Ç–∏–∫"]
    rep_system_questions = {}

    print("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–∞—Å–∞—é—â–∏—Ö—Å—è —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–∏—á–Ω–æ—Å—Ç–∏...")

    for test_id, test in tests.items():
        for question in test["questions"]:
            relevant_traits = set(question["traits"]).intersection(set(rep_system_traits))
            if relevant_traits:
                answer = responses.get(question["question_id"])
                if answer:
                    rep_system_questions[question["question_id"]] = {
                        "question_text": question["text"],
                        "traits": relevant_traits,
                        "answer": answer
                    }
                    print(f"‚úÖ –í–æ–ø—Ä–æ—Å {question['question_id']} –Ω–∞–π–¥–µ–Ω, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º: {', '.join(relevant_traits)}")

    print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(rep_system_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–∏—á–Ω–æ—Å—Ç–∏.")
    return rep_system_questions


def calculate_rep_system_scores(tests, rep_system_questions):
    scores = {trait: 0 for trait in ["–í–∏–∑—É–∞–ª", "–ê—É–¥–∏–∞–ª", "–ö–∏–Ω–µ—Å—Ç–µ—Ç–∏–∫"]}

    print("üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–∏—á–Ω–æ—Å—Ç–∏...")

    for question_id, question_data in rep_system_questions.items():
        for trait in question_data["traits"]:
            question = next(q for test in tests.values() for q in test["questions"] if q["question_id"] == question_id)
            answer_data = next(a for a in question["answers"] if a["answer"] == question_data["answer"])
            weight = answer_data["weight"].get(trait, 0)
            scores[trait] += weight
            print(f"‚úÖ –í–æ–ø—Ä–æ—Å {question_id}: –æ—Ç–≤–µ—Ç '{question_data['answer']}', –≤–µ—Å –¥–ª—è {trait}: {weight}")

    print(f"üìà –ü–æ–¥—Å—á–∏—Ç–∞–Ω—ã –±–∞–ª–ª—ã: {scores}")
    return scores


def determine_dominant_rep_system(scores):
    sorted_scores = sorted(scores.items(), key=lambda item: item[1], reverse=True)

    print("üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ–¥—É—â—É—é —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É...")

    if sorted_scores[0][1] > sorted_scores[1][1]:
        dominant_system = sorted_scores[0][0]
        print(f"üèÜ –í–µ–¥—É—â–∞—è —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {dominant_system}")
        return dominant_system
    elif sorted_scores[0][1] == sorted_scores[1][1]:
        mixed_system = f"{sorted_scores[0][0]}-{sorted_scores[1][0]}"
        print(f"‚öñÔ∏è –°–º–µ—à–∞–Ω–Ω–∞—è —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {mixed_system}")
        return mixed_system
    else:
        print("‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.")
        return "–°–º–µ—à–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è)"


def process_rep_system_test(tests, responses):
    print("üõ†Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ—Å—Ç–∞ –Ω–∞ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ª–∏—á–Ω–æ—Å—Ç–∏...")

    # –®–∞–≥ 2.1 - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Å–∞—é—Ç—Å—è —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    rep_system_questions = get_rep_system_trait_questions(tests, responses)

    # –®–∞–≥ 2.2 - –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–∏—á–Ω–æ—Å—Ç–∏
    scores = calculate_rep_system_scores(tests, rep_system_questions)

    # –®–∞–≥ 2.4 - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ–¥—É—â–µ–π —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    dominant_rep_system = determine_dominant_rep_system(scores)

    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–µ–¥—É—â–∞—è —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {dominant_rep_system}")

    return dominant_rep_system, scores, tests
