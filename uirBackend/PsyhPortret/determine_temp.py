def get_temp_trait_questions(tests, responses):
    temperament_traits = ["–°–∞–Ω–≥–≤–∏–Ω–∏–∫", "–•–æ–ª–µ—Ä–∏–∫", "–§–ª–µ–≥–º–∞—Ç–∏–∫", "–ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫"]
    temperament_questions = {}

    print("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–∞—Å–∞—é—â–∏—Ö—Å—è —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞...")

    for test_id, test in tests.items():
        for question in test["questions"]:
            relevant_traits = set(question["traits"]).intersection(set(temperament_traits))
            if relevant_traits:
                answer = responses.get(question["question_id"])
                if answer:
                    temperament_questions[question["question_id"]] = {
                        "question_text": question["text"],
                        "traits": relevant_traits,
                        "answer": answer
                    }
                    print(f"‚úÖ –í–æ–ø—Ä–æ—Å {question['question_id']} –Ω–∞–π–¥–µ–Ω, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º: {', '.join(relevant_traits)}")

    print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(temperament_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞.")
    return temperament_questions


def calculate_temp_scores(tests, temperament_questions):
    scores = {trait: 0 for trait in ["–°–∞–Ω–≥–≤–∏–Ω–∏–∫", "–•–æ–ª–µ—Ä–∏–∫", "–§–ª–µ–≥–º–∞—Ç–∏–∫", "–ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫"]}

    print("üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞...")

    for question_id, question_data in temperament_questions.items():
        for trait in question_data["traits"]:
            question = next(q for test in tests.values() for q in test["questions"] if q["question_id"] == question_id)
            answer_data = next(a for a in question["answers"] if a["answer"] == question_data["answer"])
            weight = answer_data["weight"].get(trait, 0)
            scores[trait] += weight
            print(f"‚úÖ –í–æ–ø—Ä–æ—Å {question_id}: –æ—Ç–≤–µ—Ç '{question_data['answer']}', –≤–µ—Å –¥–ª—è {trait}: {weight}")

    print(f"üìà –ü–æ–¥—Å—á–∏—Ç–∞–Ω—ã –±–∞–ª–ª—ã: {scores}")
    return scores


def determine_dominant_temp(scores):
    sorted_scores = sorted(scores.items(), key=lambda item: item[1], reverse=True)

    print("üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ç–∏–ø —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞...")

    if sorted_scores[0][1] > sorted_scores[1][1]:
        dominant_type = sorted_scores[0][0]
        print(f"üèÜ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ç–∏–ø —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞: {dominant_type}")
        return dominant_type
    elif sorted_scores[0][1] == sorted_scores[1][1]:
        mixed_type = f"{sorted_scores[0][0]}-{sorted_scores[1][0]}"
        print(f"‚öñÔ∏è –°–º–µ—à–∞–Ω–Ω—ã–π —Ç–∏–ø —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞: {mixed_type}")
        return mixed_type
    else:
        print("‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Ç–∏–ø —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞.")
        return "–°–º–µ—à–∞–Ω–Ω—ã–π —Ç–∏–ø (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π)"


def process_temp_test(tests, responses):
    print("üõ†Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ—Å—Ç–∞ –Ω–∞ —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç...")

    # –®–∞–≥ 1.1 - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Å–∞—é—Ç—Å—è —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞
    temperament_questions = get_temp_trait_questions(tests, responses)

    # –®–∞–≥ 1.2 - –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞
    scores = calculate_temp_scores(tests, temperament_questions)

    # –®–∞–≥ 1.4 - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–≥–æ —Ç–∏–ø–∞ —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞
    dominant_temp = determine_dominant_temp(scores)

    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ç–∏–ø —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞: {dominant_temp}")

    return dominant_temp, scores, tests